/*  -------------------------------------------------- */
/*  Generated by Enterprise Architect Version 11.1.1110*/
/*  Created On : støeda, 29 èerven, 2016 */
/*  DBMS       : PostgreSQL */
/*  -------------------------------------------------- */


/* Create Stored Procedures */
SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION KARTA_VERZE() RETURNS trigger AS $KARTA_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	
 
 RETURN NEW;
END;
$KARTA_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_KARTA_VERZE
    BEFORE UPDATE ON KARTA
    FOR EACH ROW
      EXECUTE PROCEDURE KARTA_VERZE()
	  
		;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION LEKARI_VERZE() RETURNS trigger AS $LEKARI_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	
 
 RETURN NEW;
END;
$LEKARI_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_LEKARI_VERZE
    BEFORE UPDATE ON LEKARI
    FOR EACH ROW
      EXECUTE PROCEDURE LEKARI_VERZE()
	  
		;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION LEKARNICI_VERZE() RETURNS trigger AS $LEKARNICI_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	
 
 RETURN NEW;
END;
$LEKARNICI_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_LEKARNICI_VERZE
    BEFORE UPDATE ON LEKARNICI
    FOR EACH ROW
      EXECUTE PROCEDURE LEKARNICI_VERZE()
	  
		;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION NASTAVENI_VERZE() RETURNS trigger AS $NASTAVENI_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	
 
 RETURN NEW;
END;
$NASTAVENI_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_NASTAVENI_VERZE
    BEFORE UPDATE ON NASTAVENI
    FOR EACH ROW
      EXECUTE PROCEDURE NASTAVENI_VERZE()
	  
		;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION OTP_KOD_VERZE() RETURNS trigger AS $OTP_KOD_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	
 RETURN NEW;
END;
$OTP_KOD_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_OTP_KOD_VERZE
    BEFORE UPDATE ON OTP_KOD
    FOR EACH ROW
      EXECUTE PROCEDURE OTP_KOD_VERZE()
	  
		;

SET SCHEMA 'iBIS200';
CREATE OR REPLACE FUNCTION PACIENT_OTP_KODY(ZASTUPOVANI uuid, PRIHLASENI uuid) RETURNS BOOLEAN 
AS
$$
BEGIN
  IF EXISTS (SELECT 1 FROM PRISTUPOVY_KOD WHERE OTP_KOD = PRIHLASENI OR OTP_KOD = ZASTUPOVANI) THEN
    RAISE EXCEPTION  'OTP kód je použitý pro pøístup k identifikátoru eReceptu.';
    RETURN TRUE;
  ELSE    
    RETURN FALSE;
  END IF;   
END;  
$$
LANGUAGE plpgsql;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION PACIENT_VERZE() RETURNS trigger AS $PACIENT_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	

  SET SCHEMA 'iBIS200'; /* Bez nastavení schématu funkci pacient_otp_kody nezná*/

  IF (pacient_otp_kody(NEW.otp_kod_prozastupovani, NEW.otp_kod_proprihlaseni) = TRUE) THEN
    RAISE EXCEPTION  'OTP kód je použitý pro pøístup k identifikátoru eReceptu.';
  END IF;
  
 RETURN NEW;
END;
$PACIENT_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_PACIENT_VERZE
    BEFORE UPDATE ON PACIENT
    FOR EACH ROW
      EXECUTE PROCEDURE PACIENT_VERZE()
	  
		;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION PREDPIS_VERZE() RETURNS trigger AS $PREDPIS_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	
 
 RETURN NEW;
END;
$PREDPIS_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_PREDPIS_VERZE
    BEFORE UPDATE ON PREDPIS
    FOR EACH ROW
      EXECUTE PROCEDURE PREDPIS_VERZE()
	  
		;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION PRISTUPOVY_KOD_VERZE() RETURNS trigger AS $PRISTUPOVY_KOD_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	
 RETURN NEW;
END;
$PRISTUPOVY_KOD_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_PRISTUPOVY_KOD_VERZE
    BEFORE UPDATE ON PRISTUPOVY_KOD
    FOR EACH ROW
      EXECUTE PROCEDURE PRISTUPOVY_KOD_VERZE()
	  
		;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION VYROBCI_SW_VERZE() RETURNS trigger AS $VYROBCI_SW_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	
 
 RETURN NEW;
END;
$VYROBCI_SW_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_VYROBCI_SW_VERZE
    BEFORE UPDATE ON VYROBCI_SW
    FOR EACH ROW
      EXECUTE PROCEDURE VYROBCI_SW_VERZE()
	  
		;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION ZASTUP_VERZE() RETURNS trigger AS $ZASTUP_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	
 RETURN NEW;
END;
$ZASTUP_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_ZASTUP_VERZE
    BEFORE UPDATE ON ZASTUP
    FOR EACH ROW
      EXECUTE PROCEDURE ZASTUP_VERZE()
	  
		;

SET SCHEMA 'iBIS200';

CREATE OR REPLACE FUNCTION ZPRAVA_VERZE() RETURNS trigger AS $ZPRAVA_VERZE$
BEGIN
  IF (OLD.VERZE_ZAZNAMU = NEW.VERZE_ZAZNAMU) THEN
	NEW.VERZE_ZAZNAMU := OLD.VERZE_ZAZNAMU + 1; 
	NEW.DATUMCASZMENY = current_timestamp;
  ELSE 
    RAISE EXCEPTION  'Záznam byl zmìnìn jiným uživatelem.';
  END IF;  	

 
 RETURN NEW;
END;
$ZPRAVA_VERZE$ LANGUAGE plpgsql;


CREATE TRIGGER UPDATE_ZPRAVA_VERZE
    BEFORE UPDATE ON ZPRAVA
    FOR EACH ROW
      EXECUTE PROCEDURE ZPRAVA_VERZE()
	  
		;
